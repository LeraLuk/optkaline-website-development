// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ - –Ω–∞—Å—Ç–æ—è—â–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ API
import * as XLSX from "xlsx";

const TELEGRAM_BOT_TOKEN = "";
const TELEGRAM_CHAT_ID = "";

class TelegramService {
  private createExcelFile(orderData: any): Blob {
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
    const excelData = [
      ["–ó–ê–ö–ê–ó OPTKALINE", "", "", "", ""],
      ["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:", orderData.orderDate, "", "", ""],
      ["", "", "", "", ""],
      ["–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ï–ù–¢–ï", "", "", "", ""],
      ["–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:", orderData.customerName, "", "", ""],
      ["–ö–æ–º–ø–∞–Ω–∏—è:", orderData.company, "", "", ""],
      ["–¢–µ–ª–µ—Ñ–æ–Ω:", orderData.phone, "", "", ""],
      ["Email:", orderData.email, "", "", ""],
      ["–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", orderData.address, "", "", ""],
      ["", "", "", "", ""],
      ["–ó–ê–ö–ê–ó–ê–ù–ù–´–ï –¢–û–í–ê–†–´", "", "", "", ""],
      ["‚Ññ", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ë—Ä–µ–Ω–¥", "–ö–æ–ª-–≤–æ", "–¶–µ–Ω–∞", "–°—É–º–º–∞"],
      ...orderData.items.map((item: any, index: number) => [
        index + 1,
        item.product.name,
        item.product.brand,
        item.quantity,
        `${item.product.price.toLocaleString("ru-RU")} ‚ÇΩ`,
        `${(item.product.price * item.quantity).toLocaleString("ru-RU")} ‚ÇΩ`,
      ]),
      ["", "", "", "", "", ""],
      [
        "",
        "",
        "",
        "",
        "–ò–¢–û–ì–û:",
        `${orderData.total.toLocaleString("ru-RU")} ‚ÇΩ`,
      ],
    ];

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
    const wb = XLSX.utils.book_new();
    const ws = XLSX.utils.aoa_to_sheet(excelData);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    ws["!cols"] = [
      { width: 5 }, // ‚Ññ
      { width: 35 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
      { width: 15 }, // –ë—Ä–µ–Ω–¥
      { width: 10 }, // –ö–æ–ª-–≤–æ
      { width: 15 }, // –¶–µ–Ω–∞
      { width: 15 }, // –°—É–º–º–∞
    ];

    XLSX.utils.book_append_sheet(wb, ws, "–ó–∞–∫–∞–∑");

    // –°–æ–∑–¥–∞–µ–º Blob
    const excelBuffer = XLSX.write(wb, { bookType: "xlsx", type: "array" });
    return new Blob([excelBuffer], {
      type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    });
  }

  private async sendMessage(message: string): Promise<boolean> {
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      console.log("üì® Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);

      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
      await new Promise((resolve) => setTimeout(resolve, 500));

      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
      return false;
    }
  }

  private async sendDocument(
    file: Blob,
    filename: string,
    caption: string = "",
  ): Promise<boolean> {
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
      console.log("üìé Telegram —Ñ–∞–π–ª:", filename, caption);
      console.log("üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:", file.size, "–±–∞–π—Ç");

      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
      await new Promise((resolve) => setTimeout(resolve, 800));

      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ Telegram:", error);
      return false;
    }
  }

  async notifyNewRegistration(name: string, phone: string): Promise<boolean> {
    const message = `üÜï <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!</b>\n\nüë§ <b>–ò–º—è:</b> ${name}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}`;
    return this.sendMessage(message);
  }

  async sendUserRegistration(userData: {
    name: string;
    company: string;
    phone: string;
  }): Promise<boolean> {
    const message = `üÜï <b>–ù–û–í–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø OPTKALINE</b>

üë§ <b>–§–ò–û:</b> ${userData.name}
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${userData.company}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${userData.phone}`;

    return this.sendMessage(message);
  }

  async notifyNewOrder(orderData: any): Promise<boolean> {
    try {
      // –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
      const excelFile = this.createExcelFile(orderData);
      const fileName = `–ó–∞–∫–∞–∑_OptkaLine_${new Date().toISOString().split("T")[0]}_${Date.now()}.xlsx`;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      const caption = `üì¶ –ù–û–í–´–ô –ó–ê–ö–ê–ó OPTKALINE

üë§ –ö–ª–∏–µ–Ω—Ç: ${orderData.customerName}
üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${orderData.company}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}
üìß Email: ${orderData.email}
üìç –ê–¥—Ä–µ—Å: ${orderData.address}

üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${orderData.items.length} —à—Ç.
üí∞ –°—É–º–º–∞: ${orderData.total.toLocaleString("ru-RU")} ‚ÇΩ

üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ Excel —Ñ–∞–π–ª–µ`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é
      const success = await this.sendDocument(excelFile, fileName, caption);

      if (success) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
        const url = URL.createObjectURL(excelFile);
        const a = document.createElement("a");
        a.href = url;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }

      return success;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:", error);
      return false;
    }
  }
}

export const telegramService = new TelegramService();
