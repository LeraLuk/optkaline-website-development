// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
const TELEGRAM_BOT_TOKEN = process.env.VITE_TELEGRAM_BOT_TOKEN || "";
const TELEGRAM_CHAT_ID = process.env.VITE_TELEGRAM_CHAT_ID || "";

class TelegramService {
  private async sendMessage(message: string): Promise<boolean> {
    try {
      if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
        console.warn("Telegram bot token –∏–ª–∏ chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
        return false;
      }

      const response = await fetch(
        `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text: message,
            parse_mode: "HTML",
          }),
        },
      );

      return response.ok;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
      return false;
    }
  }

  private async sendDocument(
    file: Blob,
    filename: string,
    caption: string = "",
  ): Promise<boolean> {
    try {
      if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
        console.warn("Telegram bot token –∏–ª–∏ chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
        return false;
      }

      const formData = new FormData();
      formData.append("chat_id", TELEGRAM_CHAT_ID);
      formData.append("document", file, filename);
      if (caption) {
        formData.append("caption", caption);
      }

      const response = await fetch(
        `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`,
        {
          method: "POST",
          body: formData,
        },
      );

      return response.ok;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ Telegram:", error);
      return false;
    }
  }

  async notifyNewRegistration(name: string, phone: string): Promise<boolean> {
    const message = `üÜï <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!</b>\n\nüë§ <b>–ò–º—è:</b> ${name}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}`;
    return this.sendMessage(message);
  }

  async notifyNewOrder(orderData: any, excelFile: Blob): Promise<boolean> {
    const message = `üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\nüë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${orderData.customerName}\nüè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${orderData.company}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${orderData.phone}\nüìß <b>Email:</b> ${orderData.email}\nüí∞ <b>–°—É–º–º–∞:</b> ${orderData.total} ‚ÇΩ`;

    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const messagesent = await this.sendMessage(message);

    // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    const fileName = `–ó–∞–∫–∞–∑_OptkaLine_${new Date().toISOString().split("T")[0]}.xlsx`;
    const fileCaption = `üìÑ –ó–∞–∫–∞–∑ –æ—Ç ${orderData.customerName}`;
    const filesSent = await this.sendDocument(excelFile, fileName, fileCaption);

    return messagesSent && filesSent;
  }
}

export const telegramService = new TelegramService();
