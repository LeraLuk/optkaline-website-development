// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ - –Ω–∞—Å—Ç–æ—è—â–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ API
const TELEGRAM_BOT_TOKEN = "";
const TELEGRAM_CHAT_ID = "";

class TelegramService {
  private async sendMessage(message: string): Promise<boolean> {
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      console.log("üì® Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);

      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
      await new Promise((resolve) => setTimeout(resolve, 500));

      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
      return false;
    }
  }

  private async sendDocument(
    file: Blob,
    filename: string,
    caption: string = "",
  ): Promise<boolean> {
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
      console.log("üìé Telegram —Ñ–∞–π–ª:", filename, caption);
      console.log("üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:", file.size, "–±–∞–π—Ç");

      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
      await new Promise((resolve) => setTimeout(resolve, 800));

      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ Telegram:", error);
      return false;
    }
  }

  async notifyNewRegistration(name: string, phone: string): Promise<boolean> {
    const message = `üÜï <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!</b>\n\nüë§ <b>–ò–º—è:</b> ${name}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}`;
    return this.sendMessage(message);
  }

  async notifyNewOrder(orderData: any, excelFile?: Blob): Promise<boolean> {
    if (excelFile) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
      const fileName = `–ó–∞–∫–∞–∑_OptkaLine_${new Date().toISOString().split("T")[0]}.xlsx`;
      const caption = `üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${orderData.customerName} (${orderData.company})`;

      return this.sendDocument(excelFile, fileName, caption);
    }

    // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    const itemsTable = orderData.items
      .map(
        (item: any, index: number) =>
          `${index + 1}. ${item.name}\n   –¶–µ–Ω–∞: ${item.price.toLocaleString("ru-RU")} ‚ÇΩ\n   –ö–æ–ª-–≤–æ: ${item.quantity} —à—Ç.\n   –ò—Ç–æ–≥–æ: ${(item.price * item.quantity).toLocaleString("ru-RU")} ‚ÇΩ`,
      )
      .join("\n\n");

    const message = `üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${orderData.customerName}
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${orderData.company}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${orderData.phone}
üìß <b>Email:</b> ${orderData.email}

üìã <b>–¢–û–í–ê–†–´:</b>
${itemsTable}

üí∞ <b>–û–ë–©–ê–Ø –°–£–ú–ú–ê: ${orderData.total.toLocaleString("ru-RU")} ‚ÇΩ</b>

üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @leradeen`;

    return this.sendMessage(message);
  }
}

export const telegramService = new TelegramService();
